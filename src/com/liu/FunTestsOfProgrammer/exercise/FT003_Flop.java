package com.liu.FunTestsOfProgrammer.exercise;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * Created by liu on 28/02/2018.
 */
public class FT003_Flop {
    /**
     * 这里有 100 张写着数字 1~100 的牌，并按顺序排列着。最开始所有 牌都是背面朝上放置。某人从第 2 张牌开始，隔 1 张牌翻牌。然后第 2, 4, 6, ..., 100 张牌就会变成正面朝上。
     * 接下来，另一个人从第 3 张牌开始，隔 2 张牌翻牌(原本背面朝上 的，翻转成正面朝上;原本正面朝上的，翻转成背面朝上)。再接下来， 又有一个人从第 4 张牌开始，隔 3 张牌翻牌( 图 1 )。
     * 像这样，从第 n 张牌开始，每隔 n-1 张牌翻牌，直到没有可翻动 的牌为止。
     * <p>
     * 如果翻牌操作进行了奇数次，则最后是正面朝上;如果进行了偶数 次，则最后是背面朝上。也就是说，这个问题等价于“寻找被翻转次数 为偶数的牌”。而翻牌操作的时机则是“翻牌间隔数字是这个数的约数 时”，因此也就相当于寻找拥有偶数个“1 以外的约数”的数字。
     * 举个例子，12 的约数是“1、2、3、4、6、12”这 6 个，也就是偶数 个。把约数由小到大排列，并将两端的数按顺序相乘就可以得到原数。
     * 例)1×12, 2×6, 3×4
     * 不过 16 的约数是“1、2、4、8、16”这 5 个，也就是奇数个。我 们把约数从小到大排列，并将两端的数按顺序相乘后，会剩下正中间的 数字 4。
     * 例)1×16, 2×8
     * ※ 剩下的数字乘以自身就可以得到原数(4×4 = 16)
     * 也就是说，只有当牌面数字是平方数的时候约数才是奇数个，也就 是除 1 以外的约数是偶数个。了解到这个规律后，即便不编程，也能知 道答案。在日常工作中，动手编程之前最好也像这样好好想一想。
     */

    public static List<Integer> getFlopMy1() {
        int[] cards = new int[100];
        for (int i = 0; i < 100; i++) {
            for (int j = i; j < 100; j += i + 1) {
                if (cards[j] == 0) {
                    cards[j] = j + 1;
                } else {
                    cards[j] = 0;
                }
            }
        }
        List<Integer> result = new ArrayList<>();
        for (int num : cards) {
            if (num != 0) {
                result.add(num);
            }
        }
        return result;
    }
}
