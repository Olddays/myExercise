package com.liu.FunTestsOfProgrammer.exercise;

import javafx.util.Pair;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by liu on 218/02/28.
 */
public class FT009_AloneMenAndWomen {
    /**
     * 人们聚集在某个活动会场上，根据到达会场的顺序排成一排等待入场。
     * 假设你是活动的主办人员，想把人们从队列的某个位置分成两组。
     * 你想要让分开的两组 里每一组的男女人数都均等，但如果到场顺序不对，
     * 可能出现无论怎么分，两组都不能男女均等的情况。
     * 举个例子，有3位男性、3位女性以“男男女男女女”的顺序到场，
     * 如 图7 所示，无论从队列的那个位置分开，两组的男女人数都不均等。
     * 但如果到场顺序为“男男女女男 女”，那么只需要在第4 个人处分组就可以令分开的两组男女人数均等了。
     * <p>
     * 问题
     * 求男性 20 人、女性 10 人的情况下，有多少种到场顺序会导致无论怎么分组都没法实现两组男女人数均等？
     * Hint
     * 把男性和女性按顺序排列，排除男女人数均等的情况。
     */

    /**
     * 用二维表格来表示男女到场的顺序有助于我们理解。
     * 这里假设向横轴方向移动表示男性到场，向纵轴方向移动表示女性到场，
     * 那么到场顺序可以表示为一条路径。
     * 因为求的是人数不均等的情况，所以要把男女人数相等的情况先排除掉，用图表示的话则如图8所示。
     * <p>
     * 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 0
     * 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 2
     * 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0
     * 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0
     * 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0
     * 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0
     * 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0
     * 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
     * 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0
     * 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0
     * <p>
     * 只要排除图8里这两种路径即可，一种是从左下角出发会使男女人数相等的路径，
     * 另一种是从右上角出发会使男女人数相等的路径。关键就在右上角那部分吧？
     * <p>
     * 为使两组男女人数都不均等，只需要求到达右上角加粗的两个方格的路径，
     * 并且统计路径个数就可以了。从图表上看，也就是“求从左下角出发，到达右上角两个方格的路径有几条”。
     */

    // 动态规划 把排序问题转化成一个路径数量问题
    public static int getAloneMenAndWomenMy1(int men, int women) {
        int[][] cache = new int[men + 1][women + 1];
        cache[0][0] = 1;
        for (int i = 0; i <= men; i++) {
            for (int j = 0; j <= women; j++) {
                if (i != j && men + 1 - i != women + 1 - j) {
                    if (i > 0) {
                        cache[i][j] += cache[i - 1][j];
                    }
                    if (j > 0) {
                        cache[i][j] += cache[i][j - 1];
                    }
                }
            }
        }
        return cache[men][women - 1] + cache[men - 1][women];
    }
}
